# Task ID: 10
# Title: Документация и развертывание
# Status: pending
# Dependencies: 7
# Priority: medium
# Description: Создание документации по использованию бота, инструкций по установке и настройке, а также подготовка к развертыванию.
# Details:
1. Создать README.md с описанием проекта и инструкциями:
```markdown
# Telegram-бот для распознавания и перевода меню

## Описание
Этот Telegram-бот позволяет пользователю отправить фотографию печатного меню (на любом языке, кроме русского), распознает текст, переводит его на русский язык, классифицирует позиции на блюда и напитки. Для каждого блюда определяет состав, наличие молока и глютена. В ответ пользователь получает HTML-страницу с красиво оформленным переведённым меню.

## Функциональность
- Получение фото меню от пользователя через Telegram
- Распознавание текста на фото
- Определение языка исходного текста (исключение — русский)
- Перевод текста на русский язык
- Классификация элементов меню: блюда и напитки
- Для каждого блюда (не напитки):
  - Генерация описания блюда на основе его полного наименования
  - Генерация списка ингредиентов
  - Генерация изображения блюда на основе его описания
  - Определение наличия молока (да/нет/неизвестно)
  - Определение наличия глютена (да/нет/неизвестно)
- Генерация HTML-документа с отформатированным, переведённым меню
- Отправка HTML-файла пользователю

## Требования
- Python 3.11+
- uv (менеджер пакетов)

## Установка

1. Клонировать репозиторий:
```bash
git clone https://github.com/username/menu-translator-bot.git
cd menu-translator-bot
```

2. Установить зависимости с помощью uv:
```bash
uv add aiogram
uv add python-dotenv
```

3. Создать файл .env в корневой директории проекта и добавить следующие переменные:
```
BOT_TOKEN=your_telegram_bot_token
GEMINI_API_KEY=your_gemini_api_key
```

## Запуск

```bash
uv run python src/bot.py
```

## Использование

1. Найдите бота в Telegram по его имени пользователя
2. Отправьте фотографию меню (на любом языке, кроме русского)
3. Дождитесь ответа с HTML-файлом переведенного меню

## Структура проекта

```
/menu_translator_bot
  /src
    __init__.py
    bot.py - основной файл бота
    config.py - конфигурационные данные
    handlers.py - обработчики сообщений
    ocr.py - распознавание текста
    translator.py - определение языка и перевод
    menu_processor.py - обработка и классификация меню
    html_generator.py - генерация HTML-страницы
  .gitignore
  README.md
  requirements.txt
```

## Лицензия
MIT
```

2. Создать файл .env.example с примером переменных окружения:
```
BOT_TOKEN=your_telegram_bot_token
GEMINI_API_KEY=your_gemini_api_key
```

3. Создать файл requirements.txt для установки зависимостей:
```
aiogram>=3.0.0
python-dotenv>=1.0.0
```

4. Создать файл Dockerfile для контейнеризации:
```dockerfile
FROM python:3.11-slim

WORKDIR /app

# Установка uv
RUN pip install uv

# Копирование файлов проекта
COPY . .

# Установка зависимостей с помощью uv
RUN uv pip install -r requirements.txt

# Запуск бота
CMD ["python", "src/bot.py"]
```

5. Создать файл docker-compose.yml для упрощения развертывания:
```yaml
version: '3'

services:
  bot:
    build: .
    restart: always
    env_file:
      - .env
    volumes:
      - ./temp:/app/temp
```

# Test Strategy:
1. Проверить корректность и полноту документации.
2. Проверить инструкции по установке и настройке.
3. Проверить развертывание с использованием Docker.
4. Проверить работу бота после развертывания.
