# Task ID: 8
# Title: Оптимизация запросов к модели Gemini
# Status: pending
# Dependencies: 5, 6
# Priority: medium
# Description: Оптимизация количества обращений к модели Gemini при обработке каждого блюда, чтобы количество обращений было равно единице.
# Details:
1. Модифицировать функцию process_menu в menu_processor.py для оптимизации запросов:
```python
async def process_menu(text, source_language):
    """
    Обрабатывает текст меню: переводит, классифицирует, генерирует описания и анализирует состав
    Оптимизировано для минимизации количества запросов к API
    """
    try:
        # Переводим текст на русский
        translated_text = await translate_text(text, source_language)
        
        # Формируем единый запрос для всей обработки меню
        prompt = f"""
        Проанализируй следующее меню на русском языке и выполни все задачи за один запрос:
        
        1. Классифицируй каждый элемент меню как 'блюдо' или 'напиток'.
        2. Для каждого блюда (не напитка):
           - Сгенерируй краткое описание блюда на основе его названия
           - Составь список основных ингредиентов
           - Определи, содержит ли блюдо молоко (да/нет/неизвестно)
           - Определи, содержит ли блюдо глютен (да/нет/неизвестно)
        3. Сгруппируй элементы по категориям (закуски, основные блюда, десерты, напитки и т.д.)
        
        Верни результат в формате JSON со следующей структурой:
        {{"categories": [{{"name": "Название категории", "items": [{{"name": "Название блюда/напитка", "type": "блюдо/напиток", "description": "Описание (только для блюд)", "ingredients": ["ингредиент1", "ингредиент2", ...] (только для блюд), "contains_milk": "да/нет/неизвестно" (только для блюд), "contains_gluten": "да/нет/неизвестно" (только для блюд), "image_prompt": "Подробное описание для генерации изображения блюда" (только для блюд)}}]}}]}}
        
        Меню:
        {translated_text}
        """
        
        response = model.generate_content(prompt)
        
        # Извлекаем JSON из ответа
        import json
        try:
            json_str = response.text
            # Находим начало и конец JSON
            start_idx = json_str.find('{')
            end_idx = json_str.rfind('}')
            if start_idx != -1 and end_idx != -1:
                json_str = json_str[start_idx:end_idx+1]
            processed_menu = json.loads(json_str)
            return processed_menu
        except json.JSONDecodeError:
            return {"error": "Failed to parse menu", "raw_response": response.text}
    except Exception as e:
        print(f"Error in menu processing: {str(e)}")
        return {"error": str(e)}
```

2. Модифицировать функцию generate_dish_image для использования подготовленных промптов:
```python
async def generate_dish_image(dish_name, description, image_prompt=None):
    """
    Генерирует изображение блюда на основе его названия, описания и специального промпта
    """
    try:
        # Используем готовый промпт, если он есть, иначе формируем новый
        if image_prompt:
            prompt = image_prompt
        else:
            prompt = f"Generate a realistic, appetizing image of the dish: {dish_name}. {description}"
        
        response = model.generate_content(prompt, stream=True)
        response.resolve()
        
        # Извлекаем изображение из ответа
        for part in response.parts:
            if hasattr(part, 'parts') and part.parts:
                for inner_part in part.parts:
                    if inner_part.text:
                        continue
                    if hasattr(inner_part, 'inline_data') and inner_part.inline_data:
                        return inner_part.inline_data
        return None
    except Exception as e:
        print(f"Error in image generation: {str(e)}")
        return None
```

3. Обновить html_generator.py для использования оптимизированных функций:
```python
# В функции generate_html изменить часть с генерацией изображения:
if item.get("type") == "блюдо":
    try:
        # Используем готовый промпт для изображения, если он есть
        image_prompt = item.get('image_prompt')
        image_data = await generate_dish_image(item['name'], item.get('description', ''), image_prompt)
        
        if image_data:
            # Получаем данные изображения и кодируем в base64
            mime_type = image_data.mime_type
            data = base64.b64encode(image_data.data).decode('utf-8')
            img_src = f"data:{mime_type};base64,{data}"
            html += f"<img class='menu-item-image' src='{img_src}' alt='{item['name']}'>\n"
    except Exception as e:
        print(f"Error generating image for {item['name']}: {str(e)}")
```

# Test Strategy:
1. Проверить количество запросов к API Gemini при обработке меню.
2. Убедиться, что для каждого блюда выполняется только один запрос к API.
3. Проверить качество результатов после оптимизации.
4. Сравнить время обработки до и после оптимизации.
